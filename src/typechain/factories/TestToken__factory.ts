/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestToken, TestTokenInterface } from "../TestToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "supply",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001bae38038062001bae8339818101604052810190620000379190620003a1565b838381600390805190602001906200005192919062000251565b5080600490805190602001906200006a92919062000251565b50505080600560006101000a81548160ff021916908360ff160217905550620000c433600560009054906101000a900460ff16600a620000ab9190620005de565b84620000b891906200071b565b620000ce60201b60201c565b505050506200093d565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000141576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001389062000477565b60405180910390fd5b62000155600083836200024760201b60201c565b806002600082825462000169919062000526565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254620001c0919062000526565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405162000227919062000499565b60405180910390a362000243600083836200024c60201b60201c565b5050565b505050565b505050565b8280546200025f90620007c9565b90600052602060002090601f016020900481019282620002835760008555620002cf565b82601f106200029e57805160ff1916838001178555620002cf565b82800160010185558215620002cf579182015b82811115620002ce578251825591602001919060010190620002b1565b5b509050620002de9190620002e2565b5090565b5b80821115620002fd576000816000905550600101620002e3565b5090565b6000620003186200031284620004df565b620004b6565b9050828152602081018484840111156200033157600080fd5b6200033e84828562000793565b509392505050565b600082601f8301126200035857600080fd5b81516200036a84826020860162000301565b91505092915050565b600081519050620003848162000909565b92915050565b6000815190506200039b8162000923565b92915050565b60008060008060808587031215620003b857600080fd5b600085015167ffffffffffffffff811115620003d357600080fd5b620003e18782880162000346565b945050602085015167ffffffffffffffff811115620003ff57600080fd5b6200040d8782880162000346565b9350506040620004208782880162000373565b925050606062000433878288016200038a565b91505092959194509250565b60006200044e601f8362000515565b91506200045b82620008e0565b602082019050919050565b62000471816200077c565b82525050565b6000602082019050818103600083015262000492816200043f565b9050919050565b6000602082019050620004b0600083018462000466565b92915050565b6000620004c2620004d5565b9050620004d08282620007ff565b919050565b6000604051905090565b600067ffffffffffffffff821115620004fd57620004fc62000893565b5b6200050882620008c2565b9050602081019050919050565b600082825260208201905092915050565b600062000533826200077c565b915062000540836200077c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000578576200057762000835565b5b828201905092915050565b6000808291508390505b6001851115620005d557808604811115620005ad57620005ac62000835565b5b6001851615620005bd5780820291505b8081029050620005cd85620008d3565b94506200058d565b94509492505050565b6000620005eb826200077c565b9150620005f88362000786565b9250620006277fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846200062f565b905092915050565b60008262000641576001905062000714565b8162000651576000905062000714565b81600181146200066a57600281146200067557620006ab565b600191505062000714565b60ff8411156200068a576200068962000835565b5b8360020a915084821115620006a457620006a362000835565b5b5062000714565b5060208310610133831016604e8410600b8410161715620006e55782820a905083811115620006df57620006de62000835565b5b62000714565b620006f4848484600162000583565b925090508184048111156200070e576200070d62000835565b5b81810290505b9392505050565b600062000728826200077c565b915062000735836200077c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161562000771576200077062000835565b5b828202905092915050565b6000819050919050565b600060ff82169050919050565b60005b83811015620007b357808201518184015260208101905062000796565b83811115620007c3576000848401525b50505050565b60006002820490506001821680620007e257607f821691505b60208210811415620007f957620007f862000864565b5b50919050565b6200080a82620008c2565b810181811067ffffffffffffffff821117156200082c576200082b62000893565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b62000914816200077c565b81146200092057600080fd5b50565b6200092e8162000786565b81146200093a57600080fd5b50565b611261806200094d6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610d27565b60405180910390f35b6100e660048036038101906100e19190610b75565b610308565b6040516100f39190610d0c565b60405180910390f35b61010461032b565b6040516101119190610e29565b60405180910390f35b610134600480360381019061012f9190610b26565b610335565b6040516101419190610d0c565b60405180910390f35b610152610364565b60405161015f9190610e44565b60405180910390f35b610182600480360381019061017d9190610b75565b61037b565b60405161018f9190610d0c565b60405180910390f35b6101b260048036038101906101ad9190610ac1565b6103b2565b6040516101bf9190610e29565b60405180910390f35b6101d06103fa565b6040516101dd9190610d27565b60405180910390f35b61020060048036038101906101fb9190610b75565b61048c565b60405161020d9190610d0c565b60405180910390f35b610230600480360381019061022b9190610b75565b610503565b60405161023d9190610d0c565b60405180910390f35b610260600480360381019061025b9190610aea565b610526565b60405161026d9190610e29565b60405180910390f35b60606003805461028590610f59565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190610f59565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b6000806103136105ad565b90506103208185856105b5565b600191505092915050565b6000600254905090565b6000806103406105ad565b905061034d858285610780565b61035885858561080c565b60019150509392505050565b6000600560009054906101000a900460ff16905090565b6000806103866105ad565b90506103a78185856103988589610526565b6103a29190610e7b565b6105b5565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461040990610f59565b80601f016020809104026020016040519081016040528092919081815260200182805461043590610f59565b80156104825780601f1061045757610100808354040283529160200191610482565b820191906000526020600020905b81548152906001019060200180831161046557829003601f168201915b5050505050905090565b6000806104976105ad565b905060006104a58286610526565b9050838110156104ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e190610e09565b60405180910390fd5b6104f782868684036105b5565b60019250505092915050565b60008061050e6105ad565b905061051b81858561080c565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061c90610de9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610695576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068c90610d69565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107739190610e29565b60405180910390a3505050565b600061078c8484610526565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461080657818110156107f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ef90610d89565b60405180910390fd5b61080584848484036105b5565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561087c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087390610dc9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e390610d49565b60405180910390fd5b6108f7838383610a8d565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561097d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097490610da9565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a109190610e7b565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a749190610e29565b60405180910390a3610a87848484610a92565b50505050565b505050565b505050565b600081359050610aa6816111fd565b92915050565b600081359050610abb81611214565b92915050565b600060208284031215610ad357600080fd5b6000610ae184828501610a97565b91505092915050565b60008060408385031215610afd57600080fd5b6000610b0b85828601610a97565b9250506020610b1c85828601610a97565b9150509250929050565b600080600060608486031215610b3b57600080fd5b6000610b4986828701610a97565b9350506020610b5a86828701610a97565b9250506040610b6b86828701610aac565b9150509250925092565b60008060408385031215610b8857600080fd5b6000610b9685828601610a97565b9250506020610ba785828601610aac565b9150509250929050565b610bba81610ee3565b82525050565b6000610bcb82610e5f565b610bd58185610e6a565b9350610be5818560208601610f26565b610bee81610fe9565b840191505092915050565b6000610c06602383610e6a565b9150610c1182610ffa565b604082019050919050565b6000610c29602283610e6a565b9150610c3482611049565b604082019050919050565b6000610c4c601d83610e6a565b9150610c5782611098565b602082019050919050565b6000610c6f602683610e6a565b9150610c7a826110c1565b604082019050919050565b6000610c92602583610e6a565b9150610c9d82611110565b604082019050919050565b6000610cb5602483610e6a565b9150610cc08261115f565b604082019050919050565b6000610cd8602583610e6a565b9150610ce3826111ae565b604082019050919050565b610cf781610f0f565b82525050565b610d0681610f19565b82525050565b6000602082019050610d216000830184610bb1565b92915050565b60006020820190508181036000830152610d418184610bc0565b905092915050565b60006020820190508181036000830152610d6281610bf9565b9050919050565b60006020820190508181036000830152610d8281610c1c565b9050919050565b60006020820190508181036000830152610da281610c3f565b9050919050565b60006020820190508181036000830152610dc281610c62565b9050919050565b60006020820190508181036000830152610de281610c85565b9050919050565b60006020820190508181036000830152610e0281610ca8565b9050919050565b60006020820190508181036000830152610e2281610ccb565b9050919050565b6000602082019050610e3e6000830184610cee565b92915050565b6000602082019050610e596000830184610cfd565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610e8682610f0f565b9150610e9183610f0f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ec657610ec5610f8b565b5b828201905092915050565b6000610edc82610eef565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015610f44578082015181840152602081019050610f29565b83811115610f53576000848401525b50505050565b60006002820490506001821680610f7157607f821691505b60208210811415610f8557610f84610fba565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b61120681610ed1565b811461121157600080fd5b50565b61121d81610f0f565b811461122857600080fd5b5056fea2646970667358221220f27702e5aacc86a4b8beef57706306dca7229508344f30e0765ae8963515343d64736f6c63430008040033";

export class TestToken__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    name: string,
    symbol: string,
    supply: BigNumberish,
    decimals_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestToken> {
    return super.deploy(
      name,
      symbol,
      supply,
      decimals_,
      overrides || {}
    ) as Promise<TestToken>;
  }
  getDeployTransaction(
    name: string,
    symbol: string,
    supply: BigNumberish,
    decimals_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name,
      symbol,
      supply,
      decimals_,
      overrides || {}
    );
  }
  attach(address: string): TestToken {
    return super.attach(address) as TestToken;
  }
  connect(signer: Signer): TestToken__factory {
    return super.connect(signer) as TestToken__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestTokenInterface {
    return new utils.Interface(_abi) as TestTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestToken {
    return new Contract(address, _abi, signerOrProvider) as TestToken;
  }
}
